{"version":3,"sources":["api/data.api.js","components/Searchbar/Searchbar.module.css","views/MoviesListView.js","components/Searchbar/Searchbar.jsx","views/MoviesPageViews.js"],"names":["BASE_URL","API_KEY","API","fetchPopularFilms","axios","get","then","response","data","results","catch","console","error","fetchFilmByQuery","searchQuery","fetchFilmById","movie_id","fetchCast","fetchReviews","posterimgpath","profilePath","module","exports","MoviesListView","movies","map","movie","to","routes","id","title","Searchbar","state","query","handleChange","element","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","this","className","styles","form","type","onChange","autoComplete","autoFocus","placeholder","Component","MoviesPageViews","fetchMovie","onChangeQuery","seachQuery","prevProps","prevState","log"],"mappings":"yIAAA,qBAEMA,EAAW,8BACVC,EAAU,mCAEXC,EAAM,CACRC,kBADQ,WAEJ,OAAOC,IACFC,IADE,UAEIL,EAFJ,yCAE6CC,IAE/CK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BC,OAAM,kBAAMC,QAAQC,MAAM,kBAGnCC,iBAVQ,WAU6B,IAAnBC,EAAkB,uDAAJ,GAC5B,OAAOV,IACFC,IADE,UAEIL,EAFJ,kCAEsCC,EAFtC,iCAEsEa,IAExER,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BC,OAAM,kBAAMC,QAAQC,MAAM,uBAGnCG,cAnBQ,WAmBuB,IAAhBC,EAAe,uDAAJ,GACtB,OAAOZ,IACFC,IADE,UAEIL,EAFJ,mBAEuBgB,EAFvB,oBAE2Cf,IAE7CK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BE,OAAM,kBAAMC,QAAQC,MAAM,+BAEnCK,UA3BQ,WA2BmB,IAAhBD,EAAe,uDAAJ,GAClB,OAAOZ,IACFC,IADE,UAEIL,EAFJ,mBAEuBgB,EAFvB,4BAEmDf,IAErDK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BE,OAAM,kBAAMC,QAAQC,MAAM,eAGnCM,aApCQ,WAoCsB,IAAhBF,EAAe,uDAAJ,GACrB,OAAOZ,IACFC,IADE,UAEIL,EAFJ,mBAEuBgB,EAFvB,4BAEmDf,IAErDK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BC,OAAM,kBAAMC,QAAQC,MAAM,eAGnCO,cAAc,mCACdC,YAAY,oCAGDlB,O,mBCrDfmB,EAAOC,QAAU,CAAC,KAAO,0B,+GCgBVC,EAdQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,OACI,6BACKA,EAAOC,KAAI,SAAAC,GAAK,OACb,6BACI,cAAC,IAAD,CAAMC,GAAE,UAAKC,IAAOJ,OAAZ,YAAsBE,EAAMG,IAApC,SACKH,EAAMI,SAFNJ,EAAMG,U,iBCoChBE,E,4MAtCXC,MAAQ,CAAEC,MAAO,I,EAEjBC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEH,MAAOE,EAAQE,cAAcC,S,EAGjDC,aAAe,SAAAJ,GACXA,EAAQK,iBACR,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,OAC/B,EAAKG,SAAS,CAAEH,MAAO,M,4CAG3B,WACI,OACI,mCACI,uBAAMS,SAAUC,KAAKJ,aAAcK,UAAWC,IAAOC,KAArD,UACI,uBACIF,UAAU,GACVG,KAAK,OACLT,MAAOK,KAAKX,MAAMC,MAClBe,SAAWL,KAAKT,aAChBe,aAAa,MACbC,WAAS,EACTC,YAAY,iBAEhB,wBAAQJ,KAAK,SAASH,UAAU,GAAhC,SACI,sBAAMA,UAAU,GAAhB,+B,GA3BAQ,aCIlBC,E,4MACFrB,MAAQ,CAAEC,MAAO,GAAIT,OAAQ,I,EAQ7B8B,WAAa,WAAO,IACRrB,EAAU,EAAKD,MAAfC,MACR/B,IAAIW,iBAAiBoB,GACpB3B,MAAK,SAAAG,GACF,EAAK2B,SAAS,CAAEH,MAAOA,EAAOT,OAAQf,Q,EAI9C8C,cAAgB,SAAAC,GACZ,EAAKpB,SAAS,CACVH,MAAOuB,K,wDAhBf,SAAmBC,EAAUC,GACtBA,EAAUzB,QAAUU,KAAKX,MAAMC,OAC9BU,KAAKW,e,oBAkBb,WAAW,IAAD,EACoBX,KAAKX,MAAvBR,EADF,EACEA,OAAQS,EADV,EACUA,MAEhB,OADAtB,QAAQgD,IAAI1B,GAER,qCACI,cAAC,EAAD,CAAWS,SAAUC,KAAKY,gBAC1B,cAAC,EAAD,CAAgB/B,OAAQA,W,GA7BV4B,aA6CfC","file":"static/js/movies-view.50bf7d3c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/';\r\nconst  API_KEY = 'e0864e234ad59915a65f6e683712555d';\r\n\r\nconst API = {\r\n    fetchPopularFilms () {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no popular'));\r\n    },\r\n\r\n    fetchFilmByQuery (searchQuery = '') {  \r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no search movie'));\r\n    },\r\n\r\n    fetchFilmById (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data)\r\n            .catch(() => console.error('current film is missing'));\r\n    },\r\n    fetchCast (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}/credits?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data)\r\n            .catch(() => console.error('no cast'));\r\n    },\r\n\r\n    fetchReviews (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}/reviews?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no cast'));\r\n    },\r\n\r\n    posterimgpath: `https://image.tmdb.org/t/p/w342/`,\r\n    profilePath: `https://image.tmdb.org/t/p/w185/`,\r\n};\r\n\r\nexport default API;  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Searchbar_form__2_JCa\"};","import { Link } from 'react-router-dom';\r\nimport routes from '../routes';\r\n\r\nconst MoviesListView = ({ movies }) => {\r\n    return (\r\n        <ul> \r\n            {movies.map(movie => (\r\n                <li key={movie.id}>\r\n                    <Link to={`${routes.movies}/${movie.id}`}>\r\n                        {movie.title}\r\n                    </Link> \r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default MoviesListView;","//import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\nimport styles from '../Searchbar/Searchbar.module.css';\r\n\r\nclass Searchbar extends Component {\r\n    state = { query: '' };\r\n\r\n    handleChange = element => {\r\n        this.setState({ query: element.currentTarget.value });\r\n    };\r\n\r\n    handleSubmit = element => {\r\n        element.preventDefault();\r\n        this.props.onSubmit(this.state.query);\r\n        this.setState({ query: '' });\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <form onSubmit={this.handleSubmit} className={styles.form}>\r\n                    <input\r\n                        className=\"\"\r\n                        type=\"text\"\r\n                        value={this.state.query}\r\n                        onChange ={this.handleChange}\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Search movie\"\r\n                    />\r\n                    <button type=\"submit\" className=\"\">\r\n                        <span className=\"\">Search</span>\r\n                    </button>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// MoviesPageViews.propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n// }\r\n\r\nexport default Searchbar;","//import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\n// import { Route } from 'react-router-dom';\r\n// import routes from '../routes';\r\nimport API from '../api/data.api';\r\nimport MoviesListView from './MoviesListView';\r\nimport Searchbar from '../components/Searchbar/Searchbar';\r\n\r\nclass MoviesPageViews extends Component {\r\n    state = { query: '', movies: [], };\r\n\r\n    componentDidUpdate(prevProps,prevState) {\r\n        if(prevState.query !== this.state.query) {\r\n            this.fetchMovie();\r\n        }\r\n    }\r\n\r\n    fetchMovie = () => {\r\n        const { query } = this.state;\r\n        API.fetchFilmByQuery(query)\r\n        .then(results => {\r\n            this.setState({ query: query, movies: results })\r\n        })\r\n    }\r\n\r\n    onChangeQuery = seachQuery => {\r\n        this.setState({\r\n            query: seachQuery,\r\n        })\r\n    }\r\n\r\n    render () {\r\n        const { movies, query } = this.state;\r\n        console.log(query);\r\n        return (\r\n            <>\r\n                <Searchbar onSubmit={this.onChangeQuery} />\r\n                <MoviesListView movies={movies} /> \r\n                {/* <Route path={`${routes.movies}?query=${query}`} component={MoviesListView} />  */}\r\n                 \r\n                  \r\n{/*             \r\n                <>\r\n                </> */}\r\n            </>                         \r\n        )\r\n    }\r\n}\r\n\r\n// MoviesPageViews.propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n// }\r\n\r\nexport default MoviesPageViews;"],"sourceRoot":""}