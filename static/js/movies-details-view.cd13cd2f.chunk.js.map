{"version":3,"sources":["api/data.api.js","views/Styles/MovieDetailsPageView.module.css","views/MovieDetailsPageView.js"],"names":["BASE_URL","API_KEY","API","fetchPopularFilms","axios","get","then","response","data","results","catch","console","error","fetchFilmByQuery","searchQuery","fetchFilmById","movie_id","fetchCast","fetchReviews","posterimgpath","profilePath","module","exports","CastMovieDetails","lazy","ReviewsMovieDetails","MovieDetailsPageView","state","movieId","movId","this","props","match","params","setState","title","poster_path","vote_average","overview","release_date","genres","yeasMovie","Number","parseInt","className","styles","section","button","type","length","wrraper","movie_poster","src","alt","block_movie_value","genre","map","genre_name","name","id","to","url","routes","cast","reviews","exact","path","component","Component"],"mappings":"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","file":"static/js/movies-details-view.cd13cd2f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/';\r\nconst  API_KEY = 'e0864e234ad59915a65f6e683712555d';\r\n\r\nconst API = {\r\n    fetchPopularFilms () {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no popular'));\r\n    },\r\n\r\n    fetchFilmByQuery (searchQuery = '') {  \r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no search movie'));\r\n    },\r\n\r\n    fetchFilmById (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data)\r\n            .catch(() => console.error('current film is missing'));\r\n    },\r\n    fetchCast (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}/credits?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data)\r\n            .catch(() => console.error('no cast'));\r\n    },\r\n\r\n    fetchReviews (movie_id = '') {\r\n        return axios\r\n            .get (\r\n                `${BASE_URL}3/movie/${movie_id}/reviews?api_key=${API_KEY}`,\r\n            )\r\n            .then(response => response.data.results)\r\n            .catch(() => console.error('no cast'));\r\n    },\r\n\r\n    posterimgpath: `https://image.tmdb.org/t/p/w342/`,\r\n    profilePath: `https://image.tmdb.org/t/p/w185/`,\r\n};\r\n\r\nexport default API;  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MovieDetailsPageView_button__qWR80\",\"wrraper\":\"MovieDetailsPageView_wrraper__1U86y\",\"genre\":\"MovieDetailsPageView_genre__2XMNh\",\"genre_name\":\"MovieDetailsPageView_genre_name__39I48\",\"block_movie_value\":\"MovieDetailsPageView_block_movie_value__3Z0li\",\"movie_poster\":\"MovieDetailsPageView_movie_poster__1qBCz\",\"section\":\"MovieDetailsPageView_section__1QO0U\"};","import { Component, lazy } from 'react';\r\nimport { NavLink, Route } from 'react-router-dom';\r\nimport routes from '../routes';\r\nimport API from '../api/data.api';\r\nimport styles from './Styles/MovieDetailsPageView.module.css';\r\n\r\nconst CastMovieDetails = lazy(() =>\r\n    import('../components/CastMovieDetails/CastMovieDetails' /* webpackChunkName: \"cast-view\" */),\r\n);\r\n\r\nconst ReviewsMovieDetails = lazy(() =>\r\n    import('../components/ReviewsMovieDetails/ReviewsMovieDetails' /* webpackChunkName: \"reviews-view\" */),\r\n);\r\n\r\nclass MovieDetailsPageView extends Component {\r\n    state = { \r\n        movieId: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        const  movId  = this.props.match.params.movieId; \r\n        API.fetchFilmById(movId)\r\n        .then(results => {\r\n            this.setState({ movieId: results})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            title,\r\n            poster_path,\r\n            vote_average,\r\n            overview,\r\n            release_date,\r\n            genres,\r\n          } = this.state.movieId;\r\n          \r\n          const { match } = this.props;\r\n          const yeasMovie = Number.parseInt(release_date);\r\n        return (\r\n            <>\r\n                <section className={styles.section}>\r\n                    <button className={styles.button} type=\"button\" >\r\n                        ðŸ¡¸ Go back\r\n                    </button>\r\n                    {this.state.movieId.length !== 0 && \r\n                        <div className={styles.wrraper}>\r\n                            <img className={styles.movie_poster} src={API.posterimgpath + poster_path} alt={title}/>\r\n                            <div className={styles.block_movie_value}>\r\n                                <h1>{title} ({yeasMovie})</h1>\r\n                                <p>User Score: {vote_average * 10}%</p> \r\n                                <h2>Overview</h2>\r\n                                <p>{overview}</p>\r\n                                <h3>Genres</h3> \r\n                                <ul className={styles.genre}>\r\n                                    {genres.map(genre => (\r\n                                        <li key={genre.id} className={styles.genre_name}>{genre.name}</li>\r\n                                    ))}\r\n                                </ul>  \r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </section>\r\n\r\n                <section className={styles.section}>\r\n                    <p>Additional information</p>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink to={`${match.url}/${routes.cast}`} >Cast</NavLink>\r\n                        </li>\r\n                        <li>\r\n                        <NavLink to={`${match.url}/${routes.reviews}`} >Reviews</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                <Route exact path={`${match.path}/${routes.cast}`} component={CastMovieDetails} /> \r\n                <Route path={`${match.path}/${routes.reviews}`} component={ReviewsMovieDetails} /> \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetailsPageView;"],"sourceRoot":""}